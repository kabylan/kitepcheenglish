@{ 
    Layout=null;
}

<!doctype html>
<html lang="">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Jekyll v4.1.1">
    <title></title>

    <link rel="canonical" href="https://getbootstrap.com/docs/4.5/examples/pricing/">

    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="~/js/words.js"></script>

    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <style>

      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      @@media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }



        html {
            font-size: 14px;
        }

        @@media (min-width: 768px) {
            html {
                font-size: 16px;
            }
        }

        .container {
            max-width: 960px;
        }

        .pricing-header {
            max-width: 700px;
        }

        .card-deck .card {
            min-width: 220px;
        }
    </style>
</head>
<body>

    <div id="app">
        <div class="d-flex flex-column flex-md-row align-items-center p-1 px-md-4 mb-1 bg-white border-bottom shadow-sm">
            <nav class="my-2 my-md-0 mr-md-3">
                <a class="p-2 text-dark" href="/Watch">Watch</a>
                <a class="p-2 text-dark" href="/Type">Type</a>
            </nav>
        </div>

        <div class="container pt-md-5">
            <div class="row p-2 justify-content-end">

                <div class="col-4"><input type="text" class="form-control text-muted border-top-0 border-left-0 border-right-0 border-0 text-center" v-model="rangestring" v-on:input="setRange" /></div>
                <div class="col-3"><input type="text" class="form-control text-muted border-top-0 border-left-0 border-right-0 border-0 text-center" v-model="timespeed" /></div>
                <div class="col-3 pt-2">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input pt-2" v-model="orderrandom" id="customSwitch1">
                        <label class="custom-control-label" for="customSwitch1">R</label>
                    </div>
                </div>
            </div>
            <div class="card mb-4 shadow-sm p-2">
                <div class="d-flex justify-content-end mr-4 p-1">
                    <span v-if="word.toLowerCase()!=inputWord.toLowerCase()" class="badge badge-light pb-1" onclick="clearingTimeoutThenSetting()">Go</span>
                    <span v-if="word.toLowerCase()==inputWord.toLowerCase()" class="badge badge-success pb-1" onclick="clearingTimeoutThenSetting()">Go</span>
                </div>
                <div class="form-signin">
                    <div class="col">
                        <input type="text" class="form-control" style="font-size: 25px;" v-model="inputWord" v-on:input="changeFullText" autofocus>
                    </div>
                    <br>
                    <div class="p-3">
                        <p class="" style="font-size: 20px;">{{definition}}</p>
                    </div>
                    <div class="p-3">
                        <p class="text-muted" style="font-size: 20px;">{{fulltext}}</p>
                    </div>
                    <br>
                    <button class="btn btn-lg btn-light btn-block" v-on:click="showWord" type="submit">show</button>
                </div>
            </div>
        </div>

    </div>

    <script>


        var app = new Vue({
            el: '#app',
            data: {
                currentindex: 0,
                range: [1, words.length],
                rangestring: 1 + '-' + words.length,
                timespeed: 30,
                orderrandom: true,
                word: '',
                synonym: '',
                definition: '',
                example: '',
                timerId: 0,
                inputWord: '',
                fulltext: '',
            },
            methods: {
                getRangeString: function () {
                    return this.range[0] + '-' + this.range[1];
                },
                setRangeString: function () {
                    this.rangestring = (this.currentindex + 1) + '-' + this.range[1];
                },
                setRange: function () {
                    this.range[0] = this.rangestring.split("-")[0] / 1;
                    this.range[1] = this.rangestring.split("-")[1] / 1;
                    this.currentindex = this.range[0];
                },
                setWordExplanations: function () {
                    this.word = this.words[this.currentindex - 1].word;
                    this.synonym = this.words[this.currentindex - 1].synonym;
                    this.definition = this.words[this.currentindex - 1].definition;
                    this.example = this.words[this.currentindex - 1].example;
                },
                clearWordExplanations: function () {
                    this.word = '';
                    this.synonym = '';
                    this.definition = '';
                    this.example = '';
                    this.fulltext = '';
                    this.inputWord = '';
                },
                increaseIndex: function () {
                    if (this.orderrandom) {
                        this.currentindex = Math.floor(Math.random() * this.range[1]);
                        this.setRangeString();
                    } else {
                        this.currentindex++;
                    }
                },
                changeFullText: function () {
                    this.fulltext = '"' + this.example.replace(this.word, this.inputWord) + '"';
                },
                showWord: function () {
                    this.inputWord = this.word;
                    this.changeFullText();
                }
            }
        });
        app.words = words;

        function next() {
            app.setRangeString();
            app.increaseIndex();
            app.setWordExplanations();
            app.changeFullText();
        }

        function clearDisplay() {
            setTimeout(function () {
                app.clearWordExplanations();
            }, (app.timespeed * 1000) - 1000);
        }

        var timerId = 0;

        function settingTimeout() {
            timerId = setTimeout(function tick() {

                next();

                timerId = setTimeout(tick, (app.timespeed * 1000) + 1000);

                clearDisplay();

            }, 1000);
        }
        
        function clearingTimeoutThenSetting() {
            clearTimeout(timerId);
            app.clearWordExplanations();
            settingTimeout();
        }

        settingTimeout();

    </script>
</body>
</html>
